services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cubes_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: cubes_db
      POSTGRES_USER: cubes_user
      POSTGRES_PASSWORD: cubes_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5433:5432"
    networks:
      - cubes_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cubes_user -d cubes_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: cubes_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5001
      DATABASE_URL: postgresql://cubes_user:cubes_password@postgres:5432/cubes_db
      FRONTEND_URL: https://localhost:3002
      CORS_ORIGIN: https://localhost:3002
    ports:
      - "5001:5001"
    networks:
      - cubes_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cubes_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://localhost:5001/api
    ports:
      - "3002:443"  # HTTPS on port 3002
    networks:
      - cubes_network
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./ssl:/etc/ssl/certs/app:ro  # SSL certificates
    healthcheck:
      test: ["CMD-SHELL", "curl -f -k https://localhost:443 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: cubes_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
    networks:
      - cubes_network
    depends_on:
      - frontend
      - backend
    profiles:
      - production  # Only run in production profile

volumes:
  postgres_data:
    driver: local

networks:
  cubes_network:
    driver: bridge
    name: cubes_network